name: Build
on:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # - name: Analyze with SonarCloud
      #   uses: sonarsource/sonarcloud-github-action@master
      #   with:
      #    projectBaseDir: my-custom-directory
      #    args: >
      #     -Dsonar.organization=my-organization
      #     -Dsonar.projectKey=my-projectkey
      #     -Dsonar.python.coverage.reportPaths=coverage.xml
      #     -Dsonar.sources=lib/
      #     -Dsonar.test.exclusions=tests/**
      #     -Dsonar.tests=tests/
      #     -Dsonar.verbose=true

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      # Step 3
      - name: Build Application and Run unit Test
        run: mvn -B package --file student-service/pom.xml
   
        
  # continuous-deployment:
  #   runs-on: ubuntu-latest
  #   needs: [continuous-integration]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #    # Step 1
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #    # Step 2
  #     - name: Create CodeDeploy Deployment
  #       id: deploy
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name Git_Application \
  #           --deployment-group-name development_gropup \
  #           --deployment-config-name CodeDeployDefault.OneAtATime \
  #           --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
